name: 'Gallery Standard Validation'
description: 'Validate the standard of the gallery'
inputs:
  token: # id of input
    description: 'The GitHub token to use for API calls'
    required: true
  repositoryURL:  # id of input
    description: 'The URL of the repository to validate'
    required: true
    default: ''
outputs:
  resultFile:
    description: "A file path to a results file."
    value: ${{ steps.run_validation.outputs.resultFile}}
runs:
  using: "composite"
  steps:
    - name: Extract topics
      id: extract_repo_info
      run: |
        extracted_link=${{ inputs.repositoryURL }} 
        repo_info=$(echo $extracted_link | sed 's|https://github.com/||')
        topics_list=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/$repo_info/topics | jq -r '.names | join(",")')
        echo "topics=\"$topics_list\"" >> $GITHUB_ENV
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Git Clone Repository
      run: |
        cd ..
        git clone ${{ inputs.repositoryURL }} candidate-repo
        if [ -d "./candidate-repo/hooks" ] && [ "$(ls -A ./candidate-repo/hooks/*.sh 2>/dev/null)" ]; then
          chmod +x ./candidate-repo/hooks/*.sh
        else
          echo "No hooks directory or no .sh files found in hooks directory"
        fi
      shell: bash

    - name: Run Microsoft Security DevOps Analysis
      uses: microsoft/security-devops-action@v1
      id: msdo
      with:
        tools: templateanalyzer
      env:
        GDN_TEMPLATEANALYZER_ANALYZEDIRECTORY: ./../candidate-repo/

    - name: Run validation
      id: run_validation
      run: |
        sudo apt-get install python3
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        cd ../candidate-repo
        python3 ../template-validation-action/src/gallery_validate.py . --debug --topics ${{ env.TOPICS }} --msdoresult ${{ steps.msdo.outputs.sarifFile }} --output ../output.log
        output_link=$(realpath ../output.log)
        echo "resultFile=\"$output_link\"" >> $GITHUB_OUTPUT
      shell: bash
      env:
        TOPICS: ${{ env.topics }}